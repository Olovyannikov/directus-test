# This file was generated. Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type Query {
    categories(filter: categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories!]!
    categories_aggregated(filter: categories_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_aggregated!]!
    categories_by_id(id: ID!): categories
    categories_by_version(id: ID!, version: String!): version_categories
    posts(filter: posts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [posts!]!
    posts_aggregated(filter: posts_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [posts_aggregated!]!
    posts_by_id(id: ID!): posts
    posts_by_version(id: ID!, version: String!): version_posts
    products(filter: products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products!]!
    products_aggregated(filter: products_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_aggregated!]!
    products_by_id(id: ID!): products
    products_by_version(id: ID!, version: String!): version_products
    products_categories(filter: products_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_categories!]!
    products_categories_aggregated(filter: products_categories_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_categories_aggregated!]!
    products_categories_by_id(id: ID!): products_categories
    products_categories_by_version(id: ID!, version: String!): version_products_categories
}

type Subscription {
    categories_mutated(event: EventEnum): categories_mutated
    directus_files_mutated(event: EventEnum): directus_files_mutated
    posts_mutated(event: EventEnum): posts_mutated
    products_categories_mutated(event: EventEnum): products_categories_mutated
    products_mutated(event: EventEnum): products_mutated
}

type categories {
    category_name: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    id: ID!
    slug: String
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type categories_aggregated {
    avg: categories_aggregated_fields
    avgDistinct: categories_aggregated_fields
    count: categories_aggregated_count
    countAll: Int
    countDistinct: categories_aggregated_count
    group: JSON
    max: categories_aggregated_fields
    min: categories_aggregated_fields
    sum: categories_aggregated_fields
    sumDistinct: categories_aggregated_fields
}

type categories_aggregated_count {
    category_name: Int
    date_created: Int
    date_updated: Int
    id: Int
    slug: Int
    sort: Int
    status: Int
    user_created: Int
    user_updated: Int
}

type categories_aggregated_fields {
    id: Float
    sort: Float
}

type categories_mutated {
    data: categories
    event: EventEnum
    key: ID!
}

type count_functions {
    count: Int
}

type datetime_functions {
    day: Int
    hour: Int
    minute: Int
    month: Int
    second: Int
    week: Int
    weekday: Int
    year: Int
}

type directus_files {
    charset: String
    description: String
    duration: Int
    embed: String
    filename_disk: String
    filename_download: String!
    filesize: GraphQLBigInt
    focal_point_x: Int
    focal_point_y: Int
    folder: String
    height: Int
    id: ID!
    location: String
    metadata: JSON
    metadata_func: count_functions
    modified_by: String
    modified_on: Date
    modified_on_func: datetime_functions
    storage: String!
    tags: JSON
    tags_func: count_functions
    title: String
    type: String
    uploaded_by: String
    uploaded_on: Date
    uploaded_on_func: datetime_functions
    width: Int
}

type directus_files_mutated {
    data: directus_files
    event: EventEnum
    key: ID!
}

type posts {
    body: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    featured_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    id: ID!
    slug: String
    sort: Int
    status: String
    title: String
    user_created: String
    user_updated: String
}

type posts_aggregated {
    avg: posts_aggregated_fields
    avgDistinct: posts_aggregated_fields
    count: posts_aggregated_count
    countAll: Int
    countDistinct: posts_aggregated_count
    group: JSON
    max: posts_aggregated_fields
    min: posts_aggregated_fields
    sum: posts_aggregated_fields
    sumDistinct: posts_aggregated_fields
}

type posts_aggregated_count {
    body: Int
    date_created: Int
    date_updated: Int
    featured_image: Int
    id: Int
    slug: Int
    sort: Int
    status: Int
    title: Int
    user_created: Int
    user_updated: Int
}

type posts_aggregated_fields {
    id: Float
    sort: Float
}

type posts_mutated {
    data: posts
    event: EventEnum
    key: ID!
}

type products {
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    id: ID!
    price: String
    product_categories(filter: products_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_categories]
    product_categories_func: count_functions
    product_description: String
    product_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    product_name: String
    slug: String
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type products_aggregated {
    avg: products_aggregated_fields
    avgDistinct: products_aggregated_fields
    count: products_aggregated_count
    countAll: Int
    countDistinct: products_aggregated_count
    group: JSON
    max: products_aggregated_fields
    min: products_aggregated_fields
    sum: products_aggregated_fields
    sumDistinct: products_aggregated_fields
}

type products_aggregated_count {
    date_created: Int
    date_updated: Int
    id: Int
    price: Int
    product_categories: Int
    product_description: Int
    product_image: Int
    product_name: Int
    slug: Int
    sort: Int
    status: Int
    user_created: Int
    user_updated: Int
}

type products_aggregated_fields {
    id: Float
    sort: Float
}

type products_categories {
    categories_id(filter: categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): categories
    id: ID!
    products_id(filter: products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): products
}

type products_categories_aggregated {
    avg: products_categories_aggregated_fields
    avgDistinct: products_categories_aggregated_fields
    count: products_categories_aggregated_count
    countAll: Int
    countDistinct: products_categories_aggregated_count
    group: JSON
    max: products_categories_aggregated_fields
    min: products_categories_aggregated_fields
    sum: products_categories_aggregated_fields
    sumDistinct: products_categories_aggregated_fields
}

type products_categories_aggregated_count {
    categories_id: Int
    id: Int
    products_id: Int
}

type products_categories_aggregated_fields {
    categories_id: Float
    id: Float
    products_id: Float
}

type products_categories_mutated {
    data: products_categories
    event: EventEnum
    key: ID!
}

type products_mutated {
    data: products
    event: EventEnum
    key: ID!
}

type version_categories {
    category_name: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    id: ID!
    slug: String
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type version_posts {
    body: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    featured_image: String
    id: ID!
    slug: String
    sort: Int
    status: String
    title: String
    user_created: String
    user_updated: String
}

type version_products {
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    id: ID!
    price: String
    product_categories: JSON
    product_categories_func: count_functions
    product_description: String
    product_image: String
    product_name: String
    slug: String
    sort: Int
    status: String
    user_created: String
    user_updated: String
}

type version_products_categories {
    categories_id: Int
    id: ID!
    products_id: Int
}

enum EventEnum {
    create
    delete
    update
}

"ISO8601 Date values"
scalar Date

"BigInt value"
scalar GraphQLBigInt

"A Float or a String"
scalar GraphQLStringOrFloat

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input big_int_filter_operators {
    _between: [GraphQLBigInt]
    _eq: GraphQLBigInt
    _gt: GraphQLBigInt
    _gte: GraphQLBigInt
    _in: [GraphQLBigInt]
    _lt: GraphQLBigInt
    _lte: GraphQLBigInt
    _nbetween: [GraphQLBigInt]
    _neq: GraphQLBigInt
    _nin: [GraphQLBigInt]
    _nnull: Boolean
    _null: Boolean
}

input categories_filter {
    _and: [categories_filter]
    _or: [categories_filter]
    category_name: string_filter_operators
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    id: number_filter_operators
    slug: string_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    user_created: string_filter_operators
    user_updated: string_filter_operators
}

input count_function_filter_operators {
    count: number_filter_operators
}

input date_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: String
    _gt: String
    _gte: String
    _in: [String]
    _lt: String
    _lte: String
    _nbetween: [GraphQLStringOrFloat]
    _neq: String
    _nin: [String]
    _nnull: Boolean
    _null: Boolean
}

input datetime_function_filter_operators {
    day: number_filter_operators
    hour: number_filter_operators
    minute: number_filter_operators
    month: number_filter_operators
    second: number_filter_operators
    week: number_filter_operators
    weekday: number_filter_operators
    year: number_filter_operators
}

input directus_files_filter {
    _and: [directus_files_filter]
    _or: [directus_files_filter]
    charset: string_filter_operators
    description: string_filter_operators
    duration: number_filter_operators
    embed: string_filter_operators
    filename_disk: string_filter_operators
    filename_download: string_filter_operators
    filesize: big_int_filter_operators
    focal_point_x: number_filter_operators
    focal_point_y: number_filter_operators
    folder: string_filter_operators
    height: number_filter_operators
    id: string_filter_operators
    location: string_filter_operators
    metadata: string_filter_operators
    metadata_func: count_function_filter_operators
    modified_by: string_filter_operators
    modified_on: date_filter_operators
    modified_on_func: datetime_function_filter_operators
    storage: string_filter_operators
    tags: string_filter_operators
    tags_func: count_function_filter_operators
    title: string_filter_operators
    type: string_filter_operators
    uploaded_by: string_filter_operators
    uploaded_on: date_filter_operators
    uploaded_on_func: datetime_function_filter_operators
    width: number_filter_operators
}

input number_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: GraphQLStringOrFloat
    _gt: GraphQLStringOrFloat
    _gte: GraphQLStringOrFloat
    _in: [GraphQLStringOrFloat]
    _lt: GraphQLStringOrFloat
    _lte: GraphQLStringOrFloat
    _nbetween: [GraphQLStringOrFloat]
    _neq: GraphQLStringOrFloat
    _nin: [GraphQLStringOrFloat]
    _nnull: Boolean
    _null: Boolean
}

input posts_filter {
    _and: [posts_filter]
    _or: [posts_filter]
    body: string_filter_operators
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    featured_image: directus_files_filter
    id: number_filter_operators
    slug: string_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    title: string_filter_operators
    user_created: string_filter_operators
    user_updated: string_filter_operators
}

input products_categories_filter {
    _and: [products_categories_filter]
    _or: [products_categories_filter]
    categories_id: categories_filter
    id: number_filter_operators
    products_id: products_filter
}

input products_filter {
    _and: [products_filter]
    _or: [products_filter]
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    id: number_filter_operators
    price: string_filter_operators
    product_categories: products_categories_filter
    product_categories_func: count_function_filter_operators
    product_description: string_filter_operators
    product_image: directus_files_filter
    product_name: string_filter_operators
    slug: string_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    user_created: string_filter_operators
    user_updated: string_filter_operators
}

input string_filter_operators {
    _contains: String
    _empty: Boolean
    _ends_with: String
    _eq: String
    _icontains: String
    _iends_with: String
    _in: [String]
    _istarts_with: String
    _ncontains: String
    _nempty: Boolean
    _nends_with: String
    _neq: String
    _niends_with: String
    _nin: [String]
    _nistarts_with: String
    _nnull: Boolean
    _nstarts_with: String
    _null: Boolean
    _starts_with: String
}
